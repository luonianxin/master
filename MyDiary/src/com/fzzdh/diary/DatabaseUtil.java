package com.fzzdh.diary;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

public  class DatabaseUtil {
	private static String url = "jdbc:mysql://localhost:3306/diary?serverTimezone=GMT&useSSL=false&useUnicode=true&amp;characterEncoding=utf-8";
	private static String drivername = "com.mysql.jdbc.Driver";
	private static String username = "root";
	private static String userpasswd = "000000";
	  
	/**
	 * 获取数据库连接
	 * @return Connetion conn
	 */
	public static Connection getConnection(){
		Connection conn=null;
		try{
			Class.forName(drivername);
			conn=DriverManager.getConnection(url,username,userpasswd);
		}catch(Exception e){
			e.printStackTrace();
		}
		return conn;
	}
	/**
	 * 	获取数据库操作对象
	 * @param conn 外部连接
	 * @return 普通操作对象
	 */
	public  static Statement getStatement(Connection conn){
		Statement stmt =null;
		try{
			stmt= conn.createStatement();
		}catch(SQLException e){
			e.printStackTrace();
		}
		return stmt;
	}
	
	/**
	 * 	返回数据库查询结果集
	 * @param stmt 外部数据库操作对象
	 * @param sql	外部查询语句
	 * @return	查询结果集
	 */
	public static ResultSet excuteQuery(Statement stmt,String sql){
		ResultSet rs = null;
		try{
			rs= stmt.executeQuery(sql);
		}catch(SQLException e){
			e.printStackTrace();
		}
		return rs;
	}
	
	/**
	 *  数据库更新函数
	 * @param conn 外部连接名
	 * @param sql	外部数据库更新语句
	 * @return  执行更新函数后的返回值
	 */
	public static int excuteUpdate(Connection conn,String sql){
		int retCode=0;
		Statement stmt=null;
		try{
			stmt=conn.createStatement();
			retCode=stmt.executeUpdate(sql);
		}catch(SQLException e){
			e.printStackTrace();
		}finally{
			if(stmt!=null){
				try {
					stmt.close();
					stmt=null;
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		return retCode;
	}
	
	/**
	 *  获取数据库操作对象
	 * @param conn 外部连接名
	 * @param sql  预编译的处理语句
	 * @return	预编译的数据库操作对象
	 */
	public  static PreparedStatement getPreStatement(Connection conn,String sql){
		PreparedStatement pstmt =null;
		try{
			pstmt= conn.prepareStatement(sql);
		}catch(SQLException e){
			e.printStackTrace();
		}
		return pstmt;
	}
	
	public  static int UpdatePasswd(Connection conn,int userid,String newPWD ){
		int row = 0;
		PreparedStatement pstmt =null;
		String sql = "update user set userpassword=? where userid=?";
		try{
			pstmt= conn.prepareStatement(sql);
			pstmt.setString(1, newPWD);
			pstmt.setInt(2, userid);
			row = pstmt.executeUpdate();
		}catch(SQLException e){
			e.printStackTrace();
		}
		return row;
	}
	
	public  static ArrayList<Diary> ExcuteQueryAll(Connection conn,int userid){
		ArrayList<Diary> list = new ArrayList<Diary>();
		ResultSet rs = null; 
		PreparedStatement pstmt =null;
		String sql = "select * from diarydetail where userid=?";
		try{
			pstmt= conn.prepareStatement(sql);
			pstmt.setInt(1, userid);
			rs =pstmt.executeQuery();
			while(rs.next()){
				Diary d = new Diary();
				d.initDiaryData(rs);
				list.add(d);
			}
			close(pstmt);
		}catch(SQLException e){
			e.printStackTrace();
		}
		return list;
	}
	
	public  static ArrayList<Diary> ExcuteQueryAll(int userid){
		Connection conn = getConnection();
		ArrayList<Diary> list = new ArrayList<Diary>();
		ResultSet rs = null; 
		PreparedStatement pstmt =null;
		String sql = "select * from diarydetail where userid=?";
		try{
			pstmt= conn.prepareStatement(sql);
			pstmt.setInt(1, userid);
			rs =pstmt.executeQuery();
			while(rs.next()){
				Diary d = new Diary();
				d.initDiaryData(rs);
				list.add(d);
			}
			close(pstmt);
			close(conn);
		}catch(SQLException e){
			e.printStackTrace();
		}
		return list;
	}
	public  static ArrayList<Diary> ExcuteQueryAll(int userid,int startPos,int pageSize){
		Connection conn = getConnection();
		ArrayList<Diary> list = new ArrayList<Diary>();
		ResultSet rs = null; 
		PreparedStatement pstmt =null;
		String sql = "select * from diaryDetail where userid=? limit "+startPos+","+pageSize;
		try{
			pstmt= conn.prepareStatement(sql);
			pstmt.setInt(1, userid);
//			pstmt.setInt(2, pageNo);
//			pstmt.setInt(3, pageSize);
			rs =pstmt.executeQuery();
			while(rs.next()){
				Diary d = new Diary();
				d.initDiaryData(rs);
				list.add(d);
			}
			close(pstmt);
			close(conn);
		}catch(SQLException e){
			e.printStackTrace();
		}
		return list;
	}
	
	/**
	 * 	获取数据库操作对象
	 * @param conn	外部连接名
	 * @param sql 	需要预处理的SQL语句
	 * @param autoGeneratedKeys 自动生成的
	 * @return 预编译的数据库操作对象
	 */
	public  static PreparedStatement getPreStatement(Connection conn,String sql,int autoGeneratedKeys ){
		PreparedStatement pstmt =null;
		try{
			pstmt= conn.prepareStatement(sql, autoGeneratedKeys);
		}catch(SQLException e){
			e.printStackTrace();
		}
		return pstmt;
	}
	
	public static void close(ResultSet rs){
		if(rs!=null){
			try{
				rs.close();
				rs=null;
			}catch(SQLException e){
				e.printStackTrace();
			}
		}
	}
	public static void close(Connection conn){
		if(conn!=null){
			try{
				conn.close();
				conn=null;
			}catch(SQLException e){
				e.printStackTrace();
			}
		}
	}
	public static void close(Statement stmt){
		if(stmt!=null){
			try{
				stmt.close();
				stmt=null;
			}catch(SQLException e){
				e.printStackTrace();
			}
		}
	}
	public static void close(PreparedStatement pstmt){
		if(pstmt!=null){
			try{
				pstmt.close();
				pstmt=null;
			}catch(SQLException e){
				e.printStackTrace();
			}
		}
	}
}
